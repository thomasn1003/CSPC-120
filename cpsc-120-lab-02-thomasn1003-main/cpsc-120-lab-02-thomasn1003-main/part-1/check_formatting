"""Tool to help students check their program for formatting errors.
    Requires clang/LLVM toolchain."""

import os
import os.path
import sys

MAIN_DIR = os.path.split(os.path.abspath(__file__))[0]
action_dir = os.path.join(os.path.join(MAIN_DIR, '..'), '.action')
sys.path.append(action_dir)

from logger import setup_logger

try:
    from srcutilities import format_check, build
except ImportError as e:
    python_dir = os.path.join(os.path.join(MAIN_DIR, '..'), '.python/lib/python3.8/site-packages')
    black_dir = os.path.join(python_dir, 'black-22.6.0-py3.8.egg')
    pathspec_dir = os.path.join(python_dir, 'pathspec-0.9.0-py3.8.egg')
    click_dir = os.path.join(python_dir, 'click-8.1.3-py3.8.egg')
    # mypy_extensions_dir = os.path.join(python_dir, 'mypy_extensions')
    sys.path.insert(0, python_dir)
    sys.path.insert(0, black_dir)
    sys.path.insert(0, pathspec_dir)
    sys.path.insert(0, click_dir)
    # sys.path.insert(0, mypy_extensions_dir)
    from srcutilities import format_check, build

def main():
    """Entry point, check if csuf_to_sacramento.cc has the correct C++ formatting."""
    logger = setup_logger()
    status = 0
    _in_file = 'fahrenheit_to_celsius.cc'
    global MAIN_DIR
    in_file = os.path.join(MAIN_DIR, _in_file)
    logger.info('Checking format for file: %s', in_file)
    if not os.path.exists(in_file):
        logger.error('File %s does not exist. Exiting.', in_file)
        status = 1
    elif not build(in_file, 'p1'):
        logger.error('%s is no longer compiling!', in_file)
        logger.warning('A program that does not compile does not get graded.')
        logger.warning('Use the compiler to see where the program is broken.')
        logger.warning(
            'You can use git to revert your changes and ask your instructor for help.'
        )
        status = 1
    else:
        diff = format_check(in_file)
        if len(diff) != 0:
            logger.error("Error: Formatting needs improvement.")
            diff_string = 'Contextual Diff\n' + '\n'.join(diff)
            logger.warning(diff_string)
            status = 1
            logger.error("ðŸ¤¯ðŸ˜³ðŸ˜¤ðŸ˜«ðŸ¤¬")
            logger.error(
                "Your formatting doesn't conform to the Google C++ style."
            )
            logger.error("Use the output from this program to help guide you.")
            logger.error("If you get stuck, ask your instructor for help.")
            logger.error(
                "Remember, you can find the Google C++ style online "
                "at https://google.github.io/styleguide/cppguide.html."
            )
        else:
            logger.info('ðŸ˜€ Formatting looks pretty good! ðŸ¥³')
            logger.info('This is not an auto-grader.')
            logger.info(
                'Make sure you followed all the instructions and requirements.'
            )
    if os.path.exists('p1'):
        os.unlink('p1')

    sys.exit(status)


if __name__ == '__main__':
    main()
